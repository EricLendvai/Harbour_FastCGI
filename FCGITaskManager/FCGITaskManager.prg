#xcommand TRY => BEGIN SEQUENCE WITH __BreakBlock()
#xcommand CATCH [<!oErr!>] => RECOVER [USING <oErr>] <-oErr->
#xcommand FINALLY => ALWAYS
#xcommand ENDTRY => END
#xcommand ENDDO => END
#xcommand ENDFOR => END

#define CRLF chr(13)+chr(10)

// #xtranslate Allt( <x> )    => alltrim( <x> )
// #xtranslate Trans( <x> )   => alltrim( str(<x>,10) )
 
function Main()
   local cAction
   local cURL
   local cProtocol
   local cPort
   local cDomain
   local cURLPath
   local cSiteRootFolder
   local cSiteBackendFolder
   local cSiteWebsiteFolder
   local cFcgiAppName
   local cFcgiExeName
   local cFcgiVersion
   local oScriptObj
   local oWmiService
   local oListOfProcess
   local oProcess
   local cProcessName
   local oHttp
   local oError
   local cConfig,cConfigFinal
   local cHtml
   local aListExeToMarkAsKill,aExeToMarkAsKill
   local cExeFileName
   local cExeVersion
   local cHtaccessMessage := "# The content of this file was generated by FCGITaskManager."+CRLF+CRLF
 
   cAction         := upper(hb_argv(1))
   cProtocol       := hb_argv(2)
   cDomain         := hb_argv(3)
   cPort           := hb_argv(4)
   cURLPath        := hb_argv(5)
   cSiteRootFolder := hb_argv(6)
   cFcgiAppName    := hb_argv(7)
   cFcgiVersion    := hb_argv(8)

   set exact on

   if empty(cAction)
      ? [Missing "Action"]

   elseif !(cAction == "KILL" .or. cAction == "DOWN" .or. cAction == "ACTIVATE")
      ? ["Action" must be "kill", "down" or "activate"]
      cAction := ""

   endif

   if !empty(cAction)
      if !(cProtocol == "http" .or. cProtocol == "https")
         ? ["Protocol" must be "http" or "https"]
         cAction := ""
      elseif empty(cDomain)
         ? [Missing "Domain"]
         cAction := ""
      elseif empty(cPort)
         ? [Missing "Port"]
         cAction := ""
      elseif val(cPort) < 80
         ? ["Port" must be a numeric >= 80]
         cAction := ""
      elseif empty(cURLPath)
         ? [Missing "URLPath". Use "/" for root.]
         cAction := ""
      elseif empty(cSiteRootFolder)
         ? [Missing "SiteRootFolder"]
         cAction := ""
      elseif !hb_DirExists(cSiteRootFolder)
         ? [Missing Directory "SiteRootFolder"]
         cAction := ""
      elseif !hb_DirExists(cSiteRootFolder+"backend\")
         ? [Missing Directory "SiteBackendFolder"]
         cAction := ""
      elseif !hb_DirExists(cSiteRootFolder+"website\")
         ? [Missing Directory "SiteWebsiteFolder"]
         cAction := ""
      elseif empty(cFcgiAppName)
         ? [Missing "FcgiAppName"]
         cAction := ""
      endif
   endif

   if !empty(cAction)
      cSiteBackendFolder := strtran(cSiteRootFolder+"backend\","/","\")
      cSiteWebsiteFolder := strtran(cSiteRootFolder+"website\","/","\")

      //Default file used for redirect on root folder
      if !file(cSiteWebsiteFolder+"default.html")
         cHtml := [<!DOCTYPE html><html><body><h1>Redirecting</h1></body></html>]
         hb_MemoWrit(cSiteWebsiteFolder+"default.html",cHtml)
      endif

      if !file(cSiteWebsiteFolder+"down.html")
         cHtml := [<!DOCTYPE html><html><head><title>Website Under Maintenance</title></head><body>]
         cHtml += [<h1>Website is not available at this time. Try Later.</h1>]
         cHtml += [</body></html>]
         hb_MemoWrit(cSiteWebsiteFolder+"down.html",cHtml)
      endif

      cFcgiExeName := "FCGI"+cFcgiAppName

      //Later will try to use curl instead.
      cURL := cProtocol+"://"+cDomain+":"+cPort+cURLPath
      
      do case
      case cAction == "KILL"
         //Will mark to Stop the specfic EXE
         hb_MemoWrit(cSiteBackendFolder+cFcgiExeName+cFcgiVersion+".kill","ShutdownMarker")

         cConfigFinal := hb_MemoRead(cSiteWebsiteFolder+".htaccess")

         cConfig := cHtaccessMessage

         cConfig += '# Work around for request to root folder.'+CRLF
         cConfig += 'DirectoryIndex default.html'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} default\.html$'+CRLF
         cConfig += 'RewriteRule "^" "'+cURLPath+'down.html" [END]'+CRLF+CRLF
         
         cConfig += '# Non present files becides a FastCGI exe will be redirected to the FastCGI current version.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-f'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-d'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !\.fcgiexe'+CRLF
         cConfig += 'RewriteRule "^" "'+cURLPath+'down.html" [END]'+CRLF+CRLF
         
         cConfig += '# Prevent from downloading security files.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_URI} \.(htaccess|htpasswd)$'+CRLF
         cConfig += 'RewriteRule "^" "AnyFile.fcgiexe'+cFcgiVersion + '" [END]'+CRLF
         
         cConfig += 'FcgidWrapper "'+strtran(cSiteBackendFolder,"\","/")+cFcgiExeName+cFcgiVersion+'.exe" .fcgiexe'+cFcgiVersion+' virtual'+CRLF
         
         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfig)
         WaitPeriod(50)  //Wait 0.5 seconds, to ensure Apache will detech changes and redirect request to the activated version + CRLF

      case cAction == "DOWN"
         //On purpose don't force all to down.html yet, since the "kills" have to be processed.
         cConfig := cHtaccessMessage

         cConfig += '# Work around for request to root folder.'+CRLF
         cConfig += 'DirectoryIndex down.html'+CRLF+CRLF
         
         cConfig += '# Non present files becides a FastCGI exe will be redirected to the FastCGI current version.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-f'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-d'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !\.fcgiexe'+CRLF
         cConfig += 'RewriteRule "^" "'+cURLPath+'down.html" [END]'+CRLF+CRLF
         
         cConfig += '# Prevent from downloading security files.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_URI} \.(htaccess|htpasswd)$'+CRLF
         cConfig += 'RewriteRule "^" "'+cURLPath+'down.html" [END]'+CRLF+CRLF
         
         //Will mark to Stop all EXEs
         aListExeToMarkAsKill := hb_Directory(cSiteBackendFolder+cFcgiExeName+"*.exe")
         for each aExeToMarkAsKill in aListExeToMarkAsKill
            cExeFileName := aExeToMarkAsKill[1]
            cExeFileName  := left(cExeFileName,len(cExeFileName)-4)   //Remove ".exe"
            cExeVersion   := substr(cExeFileName,len(cFcgiExeName)+1)
            if !File(cSiteBackendFolder+cExeFileName+".kill")
               hb_MemoWrit(cSiteBackendFolder+cExeFileName+".kill","ShutdownMarker")
            endif
            cConfig += 'FcgidWrapper "'+strtran(cSiteBackendFolder,"\","/")+cExeFileName+'.exe" .fcgiexe'+cExeVersion+' virtual'+CRLF
         endfor

         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfig)
         WaitPeriod(50)  //Wait 0.5 seconds, to ensure Apache will detech changes and redirect request to the activated version

      case cAction == "ACTIVATE"
         //Blindly try to delete the .kill marker file
         DeleteFile(cSiteBackendFolder+cFcgiExeName+cFcgiVersion+".kill")

         cConfig := cHtaccessMessage

         cConfig += '# Work around for request to root folder.'+CRLF
         cConfig += 'DirectoryIndex default.html'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} default\.html$'+CRLF
         cConfig += 'RewriteRule "^" "AnyFile.fcgiexe'+cFcgiVersion+'" [END]'+CRLF+CRLF
         
         cConfig += '# Non present files becides a FastCGI exe will be redirected to the FastCGI current version.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-f'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !-d'+CRLF
         cConfig += 'RewriteCond %{REQUEST_FILENAME} !\.fcgiexe'+CRLF
         cConfig += 'RewriteRule "^" "AnyFile.fcgiexe'+cFcgiVersion+'" [END]'+CRLF+CRLF
         
         cConfig += '# Prevent from downloading security files.'+CRLF
         cConfig += 'RewriteCond %{REQUEST_URI} \.(htaccess|htpasswd)$'+CRLF
         cConfig += 'RewriteRule "^" "AnyFile.fcgiexe'+cFcgiVersion + '" [END]'+CRLF
         
         cConfig += 'FcgidWrapper "'+strtran(cSiteBackendFolder,"\","/")+cFcgiExeName+cFcgiVersion+'.exe" .fcgiexe'+cFcgiVersion+' virtual'+CRLF
         
         cConfigFinal := cConfig

         //Will stop any other versions
         aListExeToMarkAsKill := hb_Directory(cSiteBackendFolder+cFcgiExeName+"*.exe")
         for each aExeToMarkAsKill in aListExeToMarkAsKill
            cExeFileName  := aExeToMarkAsKill[1]
            cExeFileName  := left(cExeFileName,len(cExeFileName)-4)   //Remove ".exe"
            cExeVersion   := substr(cExeFileName,len(cFcgiExeName)+1)
            if lower(cExeVersion) <> lower(cFcgiVersion)
               if !File(cSiteBackendFolder+cExeFileName+".kill")
                  hb_MemoWrit(cSiteBackendFolder+cExeFileName+".kill","ShutdownMarker")
               endif
               cConfig += 'FcgidWrapper "'+strtran(cSiteBackendFolder,"\","/")+cExeFileName+'.exe" .fcgiexe'+cExeVersion+' virtual' + CRLF
            endif
         endfor

         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfig)
         WaitPeriod(50)  //Wait 0.5 seconds, to ensure Apache will detech changes and redirect request to the activated version + CRLF
      endcase
      
      try
         //oHttp := win_oleCreateObject("MSXML2.XMLHTTP.6.0")  This control May cache requests
         oHttp := win_oleCreateObject("MSXML2.ServerXMLHTTP")
      catch oError
         ? [Failed to initilalize HTTP object. Error message: ]+oError:Description
         oHttp := nil
      endtry

      if oHttp <> nil
         try
            oScriptObj     := win_OleCreateObject([wbemScripting.SwbemLocator])
            oWmiService    := oScriptObj:ConnectServer()
            oListOfProcess := oWmiService:ExecQuery("select * from Win32_Process")
         catch
            oListOfProcess := {}
         endtry
         
         for each oProcess in oListOfProcess
            cProcessName := oProcess:Name()
            if lower(left(cProcessName,len(cFcgiExeName))) <> lower(cFcgiExeName)  // Not our FCGI App.
               loop
            endif
            if lower(right(cProcessName,4)) == ".exe"  //  Windows specific (.exe)
               cProcessName := left(cProcessName,len(cProcessName)-4)
            endif
            
            if cAction == "ACTIVATE"
               if lower(cProcessName) == lower(cFcgiExeName+cFcgiVersion)
                  //Will not stop the EXE we are trying to activate
                  loop
               endif
            elseif cAction == "KILL"
               if lower(cProcessName) <> lower(cFcgiExeName+cFcgiVersion)
                  //Will only stop the EXE we are trying to stop, not any other version
                  loop
               endif

            endif
            cExeVersion   := substr(cProcessName,len(cFcgiExeName)+1)
            try
//               oHttp:Open( "GET", cURL+cProcessName+".exe", .f. )   // .f. = Synchronous  And Windows specific (.exe)
               oHttp:Open( "GET", cURL+"AnyFile.fcgiexe"+cExeVersion, .f. )   // .f. = Synchronous  And Windows specific (.exe)
               oHttp:Send()
            catch oError
               ? [Failed to execute HTTP GET. Error message: ]+oError:Description
               loop
            endtry
            
         endfor

         oHttp := nil
      endif

      do case
      case cAction == "KILL"
         //Will re-enable the FastCGI EXE
         //Blindly try to delete the .kill marker file
         DeleteFile(cSiteBackendFolder+cFcgiExeName+cFcgiVersion+".kill")

         //Reset .htaccess file from the one we had
         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfigFinal)

      case cAction == "DOWN"
         cConfig := cHtaccessMessage

         cConfig += 'RewriteRule "^" "'+cURLPath+'down.html" [END]'

         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfig)
         
      case cAction == "ACTIVATE"
         hb_MemoWrit(cSiteWebsiteFolder+".htaccess",cConfigFinal)

      endcase
   
   endif

return nil
//=================================================================================================================
// function SendToClipboard(cText)
//    wvt_SetClipboard(cText)
// return .T.
//=================================================================================================================
